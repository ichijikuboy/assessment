#define _CRT_SECURE_NO_WARNINGS

#include "stdafx.h"
#include <windows.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define MASU 3

void banshow(HANDLE hout);
void gamereset(HANDLE hout);
void Locate(HANDLE, int, int);
int judge();
void recordstone(int r, int c);
void replay(HANDLE hout);
int complay(HANDLE hout, char *loc);
void roundcheck(HANDLE hout, int r, int c, BOOL order);
void SetStone(int *r, int *c, int i, int a);
int CheckCorner(int *r, int *c, int x, int y);
int search_win_pos(HANDLE hout, char *loc, BOOL bOrd);
int record_file();

int ban[MASU][MASU] = {};
// 私が先手=TRUE・後手=FALSE
BOOL order;
// 1番目=TRUE、2番目=FALSE;
BOOL sentegote = TRUE;
int tekazu = 0;
// コンティニュー
int con;

struct tagRec {
	int row;
	int col;
}Rec[MASU*MASU];

int main()
{
	char location[MASU] = {};
	int row = 0, col = 0;
	BOOL play = TRUE;
	// 判定
	int decision;
	// 文字取得
	char cMoji[3];
	// 文字変換
	int nMoji;
	// リプレイ
	int rep;

	// ハンドルを取得
	HANDLE hout;
	hout = GetStdHandle(STD_OUTPUT_HANDLE);

	// コンティニューするかどうか、1プレイの繰り返し
	do {
		con = 0;
		sentegote = TRUE;

		banshow(hout);
		Locate(hout, 0, MASU + 2);
		printf("先手・後手どちらにしますか？(先手=1/後手=0)：");
		scanf("%d", &order);
		Locate(hout, 0, MASU + 2);
		printf("                　　　　　 　　　　　　 　　    ");

		// 1手の繰り返し
		do {
			Locate(hout, 0, MASU + 2);

			if (sentegote) {
				printf("先手:私\n");
			}
			else if (!sentegote) {
				printf("後手:私\n");
			}

			Locate(hout, 19, MASU + 3);
			printf("  　  ");
			Locate(hout, 0, MASU + 4);
			printf("                　　　　　　    ");
			Locate(hout, 0, MASU + 5);
			printf("                　　      ");

			do {
				play = TRUE;
				if ((order&&sentegote) || (!order && !sentegote)) {
					// 場所を受け付ける。
					Locate(hout, 0, MASU + 3);
					printf("　　　　　　　　　　    ");
					Locate(hout, 0, MASU + 3);
					printf("どこに置きますか？:");
					scanf("%s", location);

					if (location[0] == '\0') {
						play = FALSE;
						break;
					}
				}
				else if ((order && !sentegote) || (!order&&sentegote)) {
					complay(hout, location);
				}

				// 置かれた石が置いていい場所かどうかチェックする繰り返し
				// 一文字目が範囲内のアルファベットか調べる
				if (isalpha(location[0])) {
					// 小文字だったら大文字にする
					if ('a' <= location[0] && location[0] <= 'z') {
						cMoji[0] = toupper(location[0]);
					}
					else {
						cMoji[0] = location[0];
					}
					// 文字の番号を取得
					row = cMoji[0] - 'A';
				}
				else {
					Locate(hout, 0, MASU + 4);
					printf("その位置は指定できません。\n");
					play = FALSE;
				}

				if (row >= MASU) {
					Locate(hout, 0, MASU + 4);
					printf("その位置は指定できません。\n");
					play = FALSE;
				}

				if (play == TRUE) {
					// 2文字目と3文字目が数字か調べる
					if (isdigit(location[1]) || (isdigit(location[1]) && isdigit(location[2]) && location[3] == '\0')) {
						// 文字列を数字に変換
						nMoji = atoi(&location[1]);
						if (nMoji <= MASU) {
							col = nMoji - 1;
						}
						else {
							Locate(hout, 0, MASU + 4);
							printf("その位置は指定できません。\n");
							play = FALSE;
						}
					}
					else {
						if (location[1] == '\0') {
							Locate(hout, 0, MASU + 4);
							printf("数字を入力してください。\n");
							play = FALSE;
						}
						else {
							Locate(hout, 0, MASU + 4);
							printf("その位置は指定できません。\n");
							play = FALSE;
						}
					}
				}


				if (play == TRUE) {
					if (ban[row][col] == 1 || ban[row][col] == 2) {
						Locate(hout, 0, 8);
						printf("すでに置かれています。\n");
						play = FALSE;
					}
					else {
						break;
					}
				}

			} while (play == FALSE);

			if (sentegote) {
				ban[row][col] = 1;
			}
			else {
				ban[row][col] = 2;
			}

			roundcheck(hout, row, col, order);
			banshow(hout);
			recordstone(row, col);

			sentegote = !sentegote;

			// 勝ち・負け・引き分けかジャッジ
			decision = judge();
			Locate(hout, 0, MASU + 5);
			switch (decision)
			{
			case 1:
				printf("先手の勝ち！\n");
				break;
			case 2:
				printf("後手の勝ち！\n");
				break;
			case 3:
				printf("両者引き分け！\n");
				break;
			default:
				break;
			}

			if (decision > 0) {
				record_file();
				do {
					Locate(hout, 0, MASU + 6);
					printf("replay? y=1/n=0:");
					scanf("%d", &rep);
					if (rep == 1) {
						replay(hout);
					}
					else if (rep == 0) {
						Locate(hout, 0, MASU + 6);
						printf("                　　　　    ");
						break;
					}

				} while (!(rep == 1 || rep == 0));

				do {
					Locate(hout, 0, MASU + 5);
					printf("Are you continue? y=1/n=0:");
					scanf("%d", &con);

					if (con == 0) {
						break;
					}
				} while (con != 1);
			}

			if (con == 1) {
				gamereset(hout);
				tekazu = 0;
				break;
			}

		} while (con == 0 && decision == 0);

	} while (con != 0);

	return 0;
}

// 位置を指定
void Locate(HANDLE hout, int x, int y) {
	COORD pos;
	pos.X = (SHORT)x;
	pos.Y = (SHORT)y;

	SetConsoleCursorPosition(hout, pos);
	return;

}

void roundcheck(HANDLE hout, int r, int c, BOOL order) {

	int jibun;
	int aite;

	if ((order&&sentegote) || (!order && !sentegote)) {
		jibun = 1;
		aite = 2;
	}
	else {
		jibun = 2;
		aite = 1;
	}

	// banの中身を調べる
	if (r >= 2 && c >= 2 && ban[r - 2][c - 2] == jibun && ban[r - 1][c - 1] == aite) {
		ban[r - 1][c - 1] = jibun;
	}
	else if (c >= 2 && ban[r][c - 2] == jibun && ban[r][c - 1] == aite) {
		ban[r][c - 1] = jibun;
	}
	else if (r + 2 < MASU && c >= 2 && ban[r + 2][c - 2] == jibun && ban[r + 1][c - 1] == aite) {
		ban[r + 1][c - 1] = jibun;
	}
	else if (r + 2 < MASU && ban[r + 2][c] == jibun && ban[r + 1][c] == aite) {
		ban[r + 1][c] = jibun;
	}
	else if (r + 2 < MASU && c + 2 < MASU && ban[r + 2][c + 2] == jibun && ban[r + 1][c + 1] == aite) {
		ban[r + 1][c + 1] = jibun;
	}
	else if (c + 2 < MASU && ban[r][c + 2] == jibun && ban[r][c + 1] == aite) {
		ban[r][c + 1] = jibun;
	}
	else if (r >= 2 && c + 2 < MASU&& ban[r - 2][c + 2] == jibun && ban[r - 1][c + 1] == aite) {
		ban[r - 1][c + 1] = jibun;
	}
	else if (r >= 2 && ban[r - 2][c] == jibun && ban[r - 1][c] == aite) {
		ban[r - 1][c] = jibun;
	}

}

void banshow(HANDLE hout) {
	int i = 0, j = 0;

	Locate(hout, 0, 0);
	printf("   ");
	for (i = 0; i < MASU; i++) {
		printf("[%2d]", i + 1);
	}
	Locate(hout, 0, 1);
	for (i = 0; i < MASU; i++) {
		printf("[%c]\n", 'A' + i);
	}

	// ○や×があったら表示
	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			if (ban[i][j] == 1) {
				Locate(hout, j * 4 + 4, i + 1);
				printf("○");
			}
			else if (ban[i][j] == 2) {
				Locate(hout, j * 4 + 4, i + 1);
				printf("×");
			}
		}
	}
}

void gamereset(HANDLE hout) {
	int i = 0, j = 0;
	Locate(hout, 0, 0);
	printf("   ");
	for (i = 0; i < MASU; i++) {
		printf("[%2d]", i + 1);
	}
	Locate(hout, 0, 1);
	for (i = 0; i < MASU; i++) {
		printf("[%c]\n", 'A' + i);
	}

	// 盤をリセット
	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			Locate(hout, j * 4 + 4, i + 1);
			printf("　");
		}
	}

	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			ban[i][j] = 0;
		}
	}

	Locate(hout, 0, MASU + 3);
	printf("　　　　　　　　　　　");
	Locate(hout, 0, MASU + 4);
	printf("                　    ");
	Locate(hout, 0, MASU + 5);
	printf("                　　　　    ");
	Locate(hout, 0, MASU + 6);
	printf("                　　　　    ");

}

int judge() {
	int colwa[MASU] = {};
	int colseki[MASU] = {};
	int rowwa[MASU] = {};
	int rowseki[MASU] = {};
	int crosswa1 = 0, crosswa2 = 0;
	int crossseki1 = 1, crossseki2 = 1;

	int i, j;

	// 積を初期化
	for (i = 0; i < MASU; i++) {
		colseki[i] = 1;
		rowseki[i] = 1;
	}

	// 和を求める
	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			colwa[i] += ban[i][j];
			rowwa[i] += ban[j][i];
		}
	}

	// 積を求める
	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			colseki[i] *= ban[i][j];
			rowseki[i] *= ban[j][i];
		}
	}

	for (i = 0, j = MASU - 1; i < MASU, j >= 0; i++, j--) {
		crosswa1 += ban[i][i];
		crossseki1 *= ban[i][i];
		crosswa2 += ban[j][i];
		crossseki2 *= ban[j][i];
	}

	// もしその行・列の和が3または6かつ積が0じゃなかったら
	for (i = 0; i < MASU; i++) {
		if (colwa[i] == MASU && colseki[i] != 0) {
			return 1;
		}
		else if (colwa[i] == MASU * 2 && colseki[i] != 0) {
			return 2;
		}
		else if (rowwa[i] == MASU && rowseki[i] != 0) {
			return 1;
		}
		else if (rowwa[i] == MASU * 2 && rowseki[i] != 0) {
			return 2;
		}
	}

	// 斜めの和が3か6かつ積が0だったら
	if (crosswa1 == MASU && crossseki1 != 0) {
		return 1;
	}
	else if (crosswa2 == MASU && crossseki2 != 0) {
		return 1;
	}
	else if (crosswa1 == MASU * 2 && crossseki1 != 0) {
		return 2;
	}
	else if (crosswa2 == MASU * 2 && crossseki2 != 0) {
		return 2;
	}

	// 全てマスが埋まって引き分けの時
	BOOL draw_judge = TRUE;
	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			if (ban[i][j] == 0) {
				draw_judge = FALSE;
			}
		}
	}

	if (draw_judge) {
		return 3;
	}


	return 0;
}

void recordstone(int r, int c) {

	Rec[tekazu].row = r;
	Rec[tekazu].col = c;
	tekazu++;
}

void replay(HANDLE hout) {
	BOOL repOrder = TRUE;

	gamereset(hout);

	for (int k = 0; k < tekazu; k++) {
		Locate(hout, 0, MASU + 4);
		printf("%d手目", k + 1);
		if (repOrder) {
			ban[Rec[k].row][Rec[k].col] = 1;
			roundcheck(hout, Rec[k].row, Rec[k].col, repOrder);
			banshow(hout);
			repOrder = !repOrder;
		}
		else {
			ban[Rec[k].row][Rec[k].col] = 2;
			roundcheck(hout, Rec[k].row, Rec[k].col, repOrder);
			banshow(hout);
			repOrder = !repOrder;
		}
		getchar();
	}
}

int complay(HANDLE hout, char *loc) {
	int r, c;

	int jibun;
	int aite;

	// あと1手で自分が勝つところ、相手が勝つところを見つける
	if (search_win_pos(hout, loc, TRUE) == 0) {
		return 0;
	}
	else if (search_win_pos(hout, loc, FALSE) == 0) {
		return 0;
	}


	if (!order) {
		jibun = 1;
		aite = 2;
	}
	else {
		jibun = 2;
		aite = 1;
	}

	SetStone(&r, &c, jibun, aite);

	loc[0] = 'A' + r;
	sprintf(&loc[1], "%d", c + 1);
	loc[1];
	return 0;
}

void SetStone(int *r, int *c, int j, int a) {
	int x, y;

	for (x = 0; x < MASU; x++) {
		for (y = 0; y < MASU; y++) {
			if (x >= 2 && y >= 2 && ban[x - 2][y - 2] == j && ban[x - 1][y - 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (y >= 2 && ban[x][y - 2] == j && ban[x][y - 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (x + 2 < MASU && y >= 2 && ban[x + 2][y - 2] == j && ban[x + 1][y - 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (x + 2 < MASU && ban[x + 2][y] == j && ban[x + 1][y] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (x + 2 < MASU && y + 2 < MASU && ban[x + 2][y + 2] == j && ban[x + 1][y + 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (y + 2 < MASU && ban[x][y + 2] == j && ban[x][y + 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (x >= 2 && y + 2 < MASU&& ban[x - 2][y + 2] == j && ban[x - 1][y + 1] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
			else if (x >= 2 && ban[x - 2][y] == j && ban[x - 1][y] == a) {
				if (ban[x][y] != 1 && ban[x][y] != 2) {
					*r = x;
					*c = y;
					return;
				}
			}
		}
	}

	if (CheckCorner(r, c, x, y)) {
		return;
	}


	srand((unsigned)time(NULL));
	*r = rand() % MASU;
	*c = rand() % MASU;
	return;

}

int CheckCorner(int *r, int *c, int x, int y) {
	if (ban[0][0] != 1 && ban[0][0] != 2) {
		*r = 0;
		*c = 0;
		return 1;
	}
	else if (ban[0][MASU - 1] != 1 && ban[0][MASU - 1] != 2) {
		*r = 0;
		*c = MASU - 1;
		return 1;
	}
	else if (ban[MASU - 1][0] != 1 && ban[MASU - 1][0] != 2) {
		*r = MASU - 1;
		*c = 0;
		return 1;
	}
	else if (ban[MASU - 1][MASU - 1] != 1 && ban[MASU - 1][MASU - 1] != 2) {
		*r = MASU - 1;
		*c = MASU - 1;
		return 1;
	}

	return 0;
}

int search_win_pos(HANDLE hout, char *loc, BOOL bOrd) {
	int jibun, aite;
	int nWinner;
	int i, j;

	if (order) {
		jibun = 1;
		aite = 2;
	}
	else {
		jibun = 2;
		aite = 1;
	}

	if (bOrd) {
		nWinner = aite;
	}
	else {
		nWinner = jibun;
	}

	for (i = 0; i < MASU; i++) {
		for (j = 0; j < MASU; j++) {
			// そこが0だったら
			// nWinner
			if (ban[i][j] == 0) {
				ban[i][j] = nWinner;

				if (judge() == nWinner) {
					loc[0] = 'A' + i;
					sprintf(&loc[1], "%d", j + 1);
					loc[1];
					ban[i][j] = 0;
					return 0;
				}
				else {
					ban[i][j] = 0;
				}
			}
		}
	}
	return -1;
}

int record_file() {
	FILE *file;
	file = fopen("record.txt", "w");

	for (int i = 0; i < tekazu; i++) {
		fprintf(file, "%d, %d\n", Rec[i].row, Rec[i].col);
	}
	fclose(file);
	return 0;

}
